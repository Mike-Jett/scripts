--	Adding FK constraints back
use Service_July25
ALTER TABLE [Service_July25].[dbo].[SRPurchaseAdviceBatch]  WITH noCHECK ADD  CONSTRAINT [FK_SRPurchaseAdviceBatch_AcquiredFrom] FOREIGN KEY([SoldTo])
REFERENCES [Service_July25].[dbo].[AcquiredFrom] ([Code])


ALTER TABLE [Service_July25].[dbo].[SRPurchaseAdviceBatch] CHECK CONSTRAINT [FK_SRPurchaseAdviceBatch_AcquiredFrom]				
--	1^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ALTER TABLE [Service_July25].[dbo].[SRSalesAdviceBatch]  WITH noCHECK ADD  CONSTRAINT [FK_SRSalesAdviceBatch_AcquiredFrom] FOREIGN KEY([SoldTo])
REFERENCES [Service_July25].[dbo].[AcquiredFrom] ([Code])

ALTER TABLE [Service_July25].[dbo].[SRSalesAdviceBatch] CHECK CONSTRAINT [FK_SRSalesAdviceBatch_AcquiredFrom]
--	2^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ALTER TABLE [Service_July25].[dbo].[SRSalesAdviceBatch]  WITH noCHECK ADD  CONSTRAINT [FK_SRSalesAdviceBatch_SRServicedBy] FOREIGN KEY([SoldTo], [ServicedByCode])
REFERENCES [Service_July25].[dbo].[SRServicedBy] ([AcquiredFromCode], [ServicedByCode])

ALTER TABLE [Service_July25].[dbo].[SRSalesAdviceBatch] CHECK CONSTRAINT [FK_SRSalesAdviceBatch_SRServicedBy]
--	3^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ALTER TABLE [Service_July25].[dbo].[SRPurchaseAdviceBatch]  WITH noCHECK ADD  CONSTRAINT [FK_SRPurchaseAdviceBatch_SRServicedBy] FOREIGN KEY([SoldTo], [ServicedByCode])
REFERENCES [Service_July25].[dbo].[SRServicedBy] ([AcquiredFromCode], [ServicedByCode])
GO

ALTER TABLE [Service_July25].[dbo].[SRPurchaseAdviceBatch] CHECK CONSTRAINT [FK_SRPurchaseAdviceBatch_SRServicedBy]
--	4^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
use Service_July25
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO



CREATE TRIGGER [dbo].[AcquiredFrom_UTrig] ON [dbo].[AcquiredFrom] FOR UPDATE AS
/* Version : 5.0 */
/* Copyright 1996-2001 by INTERLINQ Software Corporation */
/*
 * PREVENT UPDATES IF DEPENDENT RECORDS IN 'Loan'
 */
IF UPDATE(Code)
    BEGIN
        IF (SELECT COUNT(*) FROM deleted, Loan WHERE (deleted.Code = Loan.AcquiredFrom)) > 0
            BEGIN
        RAISERROR('Cannot delete or change record.  Since related records exist in table ''''Loan'''', referential integrity rules would be violated.', 16, 1)
                ROLLBACK TRANSACTION
            END
    END




GO

ALTER TABLE [dbo].[AcquiredFrom] ENABLE TRIGGER [AcquiredFrom_UTrig]
GO
--	5^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
use Service_July25
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

CREATE TRIGGER [dbo].[SRBalanceControl_DTrig] ON [dbo].[SRBalanceControl] FOR DELETE
AS
/* Version : 6.9 */
/* Copyright 1996-2007 Harland Financial Solutions, Inc. All rights reserved. */
IF EXISTS (select 1 from deleted d inner join SRPurchaseAdviceBatch p on d.AcquiredFromCode = p.SoldTo)
BEGIN
	RAISERROR('Cannot delete record. A SR Purchase Advice batch requires it.', 16, 1)
	ROLLBACK TRANSACTION
END
GO

ALTER TABLE [dbo].[SRBalanceControl] ENABLE TRIGGER [SRBalanceControl_DTrig]
GO
--	6^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

CREATE TRIGGER [dbo].[AcquiredFrom_DTrig] ON [dbo].[AcquiredFrom] FOR DELETE
AS
/* Version : 6.7 */
/* Copyright 1996-2006 Harland Financial Solutions, Inc. All rights reserved. */
/*
 * PREVENT DELETES IF DEPENDENT RECORDS IN 'Loan'
 */
IF (SELECT COUNT(*) FROM deleted, Loan WHERE (deleted.Code = Loan.AcquiredFrom)) > 0
    BEGIN
        RAISERROR('Cannot delete or change record.  Since related records exist in table ''''Loan'''', referential integrity rules would be violated.', 16, 1)
        ROLLBACK TRANSACTION
    END
/*
 * PREVENT DELETES IF DEPENDENT RECORDS IN 'Loan'
 */
IF (SELECT COUNT(*) FROM deleted, Loan WHERE (deleted.Code = Loan.SoldTo)) > 0
    BEGIN
        RAISERROR('Cannot delete or change record.  Since related records exist in table ''''Loan'''', referential integrity rules would be violated.', 16, 1)
        ROLLBACK TRANSACTION
    END
/*
 * CASCADE DELETES TO 'FundingFee'
 */
DELETE FundingFee FROM deleted, FundingFee WHERE deleted.Code = FundingFee.Code

/*
 * CASCADE DELETES TO 'MERSOrgIDs'
 */
DELETE MERSOrgIDs FROM deleted, MERSOrgIDs WHERE deleted.Code = MERSOrgIDs.Table_Key AND MERSOrgIDs.Table_ID = 5
GO

ALTER TABLE [dbo].[AcquiredFrom] ENABLE TRIGGER [AcquiredFrom_DTrig]
GO
--	7^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

--	8^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

--	9^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

--	10^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

--	11^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

--	12^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

--	13^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^